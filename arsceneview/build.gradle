plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka'
    id 'maven-publish'
}

android {
    namespace 'io.github.sceneview.ar'

    compileSdk 34

    defaultConfig {
        minSdk 24
        targetSdk 34

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.4.0-alpha02"
    }
    // Preserve compression of filament files
    androidResources {
        noCompress 'filamat', 'ktx'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'

    // Compose
    implementation "androidx.compose.ui:ui:1.5.0"
    implementation "androidx.compose.foundation:foundation:1.5.0"

    // SceneView
    api project(":sceneview")

    // ARCore
    api "com.google.ar:core:1.39.0"
}

project.afterEvaluate {
    publishing {
        publications {
            library(MavenPublication) {
                setGroupId 'io.github.sceneview.ar.kenility'
                //You can either define these here or get them from project conf elsewhere
                setArtifactId 'arsceneview'
                version android.defaultConfig.versionName
                artifact bundleReleaseAar //aar artifact you want to publish

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}